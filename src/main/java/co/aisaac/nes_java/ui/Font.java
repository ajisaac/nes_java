package co.aisaac.nes_java.ui;

import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.imageio.ImageIO;

public class Font {
    // global variable fontMask of type BufferedImage
    public static BufferedImage fontMask;

    // static initializer block equivalent to Go's init() function
    static {
        BufferedImage im = null;
        try {
            im = ImageIO.read(new ByteArrayInputStream(fontData));
        } catch (IOException err) {
            System.err.println(err);
            System.exit(1);
        }
        Rectangle bounds = im.getRaster().getBounds();
        int width = bounds.width;
        int height = bounds.height;
        BufferedImage mask = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                // get red component from im at (x, y)
                int rgb = im.getRGB(x, y);
                Color col = new Color(rgb, true);
                if (col.getRed() > 0) {
                    // set pixel to opaque (using opaque black, equivalent to color.Opaque)
                    mask.setRGB(x, y, new Color(0, 0, 0, 255).getRGB());
                }
            }
        }
        fontMask = mask;
    }

    public static BufferedImage CreateGenericThumbnail(String text) {
        BufferedImage im = new BufferedImage(256, 240, BufferedImage.TYPE_INT_ARGB);
        // fill the image with black
        Rectangle rect = new Rectangle(0, 0, im.getWidth(), im.getHeight());
        fillRect(im, rect, Color.BLACK);
        DrawCenteredText(im, text, 1, 2, new Color(128, 128, 128, 255));
        DrawCenteredText(im, text, 0, 0, Color.WHITE);
        return im;
    }

    public static List<String> WordWrap(String text, int maxLength) {
        List<String> rows = new ArrayList<>();
        String[] words = text.trim().split("\\s+");
        if (words.length == 0) {
            return rows;
        }
        String row = words[0];
        for (int i = 1; i < words.length; i++) {
            String word = words[i];
            String newRow = row + " " + word;
            if (newRow.length() <= maxLength) {
                row = newRow;
            } else {
                rows.add(row);
                row = word;
            }
        }
        rows.add(row);
        return rows;
    }

    public static void DrawCenteredText(BufferedImage dst, String text, int dx, int dy, Color c) {
        List<String> rows = WordWrap(text, 15);
        for (int i = 0; i < rows.size(); i++) {
            String row = rows.get(i);
            int x = 128 - row.length() * 8;
            int y = 120 - rows.size() * 12 + i * 24;
            DrawText(dst, x + dx, y + dy, row, c);
        }
    }

    public static void DrawCharacter(BufferedImage dst, int x, int y, byte ch, Color c) {
        if ((ch & 0xFF) < 32 || (ch & 0xFF) > 128) {
            return;
        }
        int cx = ((ch & 0xFF) - 32) % 16 * 16;
        int cy = ((ch & 0xFF) - 32) / 16 * 16;
        Rectangle r = new Rectangle(x, y, 16, 16);
        Point sp = new Point(cx, cy);
        // draw mask: for each pixel in the 16x16 rectangle,
        // check corresponding pixel in fontMask at offset sp and if opaque, set dst pixel to color c.
        for (int j = 0; j < 16; j++) {
            for (int i = 0; i < 16; i++) {
                int maskX = sp.x + i;
                int maskY = sp.y + j;
                if (maskX < fontMask.getWidth() && maskY < fontMask.getHeight()) {
                    int maskRGB = fontMask.getRGB(maskX, maskY);
                    Color maskColor = new Color(maskRGB, true);
                    if (maskColor.getAlpha() == 255) {
                        int dstX = r.x + i;
                        int dstY = r.y + j;
                        if (dstX >= 0 && dstX < dst.getWidth() && dstY >= 0 && dstY < dst.getHeight()) {
                            dst.setRGB(dstX, dstY, c.getRGB());
                        }
                    }
                }
            }
        }
    }

    public static void DrawText(BufferedImage dst, int x, int y, String text, Color c) {
        for (int i = 0; i < text.length(); i++) {
            DrawCharacter(dst, x, y, (byte) text.charAt(i), c);
            x += 16;
        }
    }

    // Helper method to fill a rectangle in a BufferedImage with a given color.
    private static void fillRect(BufferedImage image, Rectangle rect, Color color) {
        for (int y = rect.y; y < rect.y + rect.height; y++) {
            for (int x = rect.x; x < rect.x + rect.width; x++) {
                if (x >= 0 && x < image.getWidth() && y >= 0 && y < image.getHeight()) {
                    image.setRGB(x, y, color.getRGB());
                }
            }
        }
    }

    public static byte[] fontData = new byte[]{
            (byte)0x89, (byte)0x50, (byte)0x4E, (byte)0x47, (byte)0x0D, (byte)0x0A, (byte)0x1A, (byte)0x0A, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0D,
            (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x60,
            (byte)0x02, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x8F, (byte)0x9F, (byte)0x44, (byte)0x1B, (byte)0x00, (byte)0x00, (byte)0x00,
            (byte)0x06, (byte)0x50, (byte)0x4C, (byte)0x54, (byte)0x45, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0xFF, (byte)0xFF, (byte)0xFE, (byte)0x6A,
            (byte)0x62, (byte)0xC8, (byte)0x2E, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x62, (byte)0x4B, (byte)0x47, (byte)0x44, (byte)0x00,
            (byte)0x88, (byte)0x05, (byte)0x1D, (byte)0x48, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x09, (byte)0x70, (byte)0x48, (byte)0x59, (byte)0x73,
            (byte)0x00, (byte)0x00, (byte)0x0E, (byte)0xC4, (byte)0x00, (byte)0x00, (byte)0x0E, (byte)0xC4, (byte)0x01, (byte)0x95, (byte)0x2B, (byte)0x0E,
            (byte)0x1B, (byte)0x00, (byte)0x00, (byte)0x02, (byte)0xD2, (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0xDA, (byte)0xC5,
            (byte)0x98, (byte)0x49, (byte)0x62, (byte)0x23, (byte)0x21, (byte)0x0C, (byte)0x45, (byte)0xB5, (byte)0xE1, (byte)0x7E, (byte)0xDA, (byte)0xFC,
            (byte)0xFB, (byte)0x5F, (byte)0xA5, (byte)0x4B, (byte)0xE8, (byte)0x4B, (byte)0x88, (byte)0x72, (byte)0x2A, (byte)0x1D, (byte)0x07, (byte)0xB9,
            (byte)0x9B, (byte)0xC4, (byte)0x2E, (byte)0x8C, (byte)0xE1, (byte)0x19, (byte)0x8D, (byte)0x0C, (byte)0x22, (byte)0x56, (byte)0x86, (byte)0x5E,
            (byte)0xFF, (byte)0x98, (byte)0x2F, (byte)0x81, (byte)0x78, (byte)0x81, (byte)0xB5, (byte)0xC5, (byte)0x77, (byte)0xF2, (byte)0x50, (byte)0xE2,
            (byte)0x9B, (byte)0x63, (byte)0x00, (byte)0x90, (byte)0x80, (byte)0x71, (byte)0xD5, (byte)0xAD, (byte)0xE6, (byte)0x9F, (byte)0xC5, (byte)0x81,
            (byte)0x90, (byte)0xD9, (byte)0x92, (byte)0xF0, (byte)0x2C, (byte)0xF9, (byte)0x6B, (byte)0x4D, (byte)0x00, (byte)0x00, (byte)0xEA, (byte)0xFD,
            (byte)0x31, (byte)0x45, (byte)0x40, (byte)0x4C, (byte)0xD2, (byte)0xDE, (byte)0x50, (byte)0xC4, (byte)0xBB, (byte)0x4B, (byte)0xD0, (byte)0x02,
            (byte)0xF0, (byte)0xCF, (byte)0x26, (byte)0x82, (byte)0xBA, (byte)0xE2, (byte)0xE0, (byte)0xDF, (byte)0x06, (byte)0x00, (byte)0x5E, (byte)0xD8,
            (byte)0x1D, (byte)0xBB, (byte)0x04, (byte)0xE7, (byte)0x00, (byte)0x4E, (byte)0xC5, (byte)0x44, (byte)0x98, (byte)0xAD, (byte)0xF6, (byte)0x3F,
            (byte)0x20, (byte)0xF2, (byte)0x17, (byte)0x11, (byte)0x96, (byte)0x79, (byte)0xBB, (byte)0x00, (byte)0xAE, (byte)0x48, (byte)0xA5, (byte)0x11,
            (byte)0xCB, (byte)0x34, (byte)0xAB, (byte)0x19, (byte)0xB1, (byte)0x2C, (byte)0x08, (byte)0x69, (byte)0x03, (byte)0x24, (byte)0x87, (byte)0xD3,
            (byte)0xB7, (byte)0xEE, (byte)0x48, (byte)0xEA, (byte)0xEE, (byte)0xCA, (byte)0x05, (byte)0xA0, (byte)0x7D, (byte)0x80, (byte)0xE7, (byte)0x68,
            (byte)0x79, (byte)0x0C, (byte)0x9F, (byte)0x9F, (byte)0xB4, (byte)0xFE, (byte)0x10, (byte)0x90, (byte)0x8E, (byte)0x33, (byte)0x03, (byte)0xC9,
            (byte)0x2A, (byte)0xEE, (byte)0x28, (byte)0x70, (byte)0xD7, (byte)0x66, (byte)0xBB, (byte)0xBC, (byte)0x2A, (byte)0x5C, (byte)0xDC, (byte)0xE9,
            (byte)0x8E, (byte)0x01, (byte)0x23, (byte)0x03, (byte)0x67, (byte)0xD0, (byte)0x89, (byte)0x90, (byte)0x41, (byte)0x54, (byte)0x82, (byte)0x7C,
            (byte)0x99, (byte)0x70, (byte)0x33, (byte)0x23, (byte)0x1A, (byte)0x00, (byte)0x48, (byte)0x3B, (byte)0x79, (byte)0x0E, (byte)0x63, (byte)0x58,
            (byte)0xB3, (byte)0x1F, (byte)0xE4, (byte)0x0E, (byte)0x70, (byte)0xAF, (byte)0x66, (byte)0xA5, (byte)0x17, (byte)0x10, (byte)0x8A, (byte)0xA3,
            (byte)0x00, (byte)0xD1, (byte)0x29, (byte)0x95, (byte)0x7B, (byte)0xF3, (byte)0xA3, (byte)0x45, (byte)0xEB, (byte)0x02, (byte)0xB8, (byte)0x4D,
            (byte)0xE7, (byte)0x40, (byte)0x95, (byte)0x32, (byte)0x6D, (byte)0x57, (byte)0xEE, (byte)0x4B, (byte)0xE0, (byte)0xC6, (byte)0xE0, (byte)0x06,
            (byte)0xC0, (byte)0x15, (byte)0x36, (byte)0x9E, (byte)0xB2, (byte)0x62, (byte)0x36, (byte)0x37, (byte)0xC5, (byte)0x2D, (byte)0xF3, (byte)0x2E,
            (byte)0x33, (byte)0xA2, (byte)0x26, (byte)0x97, (byte)0x63, (byte)0xC0, (byte)0xB4, (byte)0x9E, (byte)0xA5, (byte)0x73, (byte)0xBA, (byte)0xED,
            (byte)0x1C, (byte)0x12, (byte)0xEE, (byte)0x6B, (byte)0x7A, (byte)0x02, (byte)0x13, (byte)0x6D, (byte)0x00, (byte)0x8A, (byte)0x2B, (byte)0x3B,
            (byte)0xE4, (byte)0x18, (byte)0xF0, (byte)0x46, (byte)0x79, (byte)0x23, (byte)0xEA, (byte)0xDF, (byte)0x00, (byte)0xF8, (byte)0x54, (byte)0xB5,
            (byte)0x84, (byte)0xB0, (byte)0xFA, (byte)0x12, (byte)0xE7, (byte)0x15, (byte)0xF5, (byte)0xF4, (byte)0x36, (byte)0xE5, (byte)0xF4, (byte)0x7A,
            (byte)0x09, (byte)0xB2, (byte)0x39, (byte)0xF6, (byte)0x18, (byte)0x80, (byte)0x4C, (byte)0xE2, (byte)0xF6, (byte)0xF4, (byte)0x5A, (byte)0xD5,
            (byte)0xD7, (byte)0x0A, (byte)0xB6, (byte)0xE8, (byte)0x65, (byte)0xBF, (byte)0x67, (byte)0x7F, (byte)0x69, (byte)0xEA, (byte)0x53, (byte)0x00,
            (byte)0xA7, (byte)0xC6, (byte)0x0D, (byte)0x8E, (byte)0xAC, (byte)0xE7, (byte)0xEE, (byte)0xEA, (byte)0x13, (byte)0x90, (byte)0x71, (byte)0x67,
            (byte)0x22, (byte)0xB6, (byte)0x03, (byte)0x80, (byte)0x1C, (byte)0x00, (byte)0x44, (byte)0x52, (byte)0xA1, (byte)0x32, (byte)0x03, (byte)0xB0,
            (byte)0x12, (byte)0x8A, (byte)0x82, (byte)0x0A, (byte)0x6E, (byte)0x02, (byte)0x00, (byte)0x0F, (byte)0x22, (byte)0x70, (byte)0x9A, (byte)0x54,
            (byte)0x76, (byte)0xB0, (byte)0x30, (byte)0x4C, (byte)0x9C, (byte)0x36, (byte)0x40, (byte)0xE9, (byte)0xF8, (byte)0x6A, (byte)0xC6, (byte)0x1B,
            (byte)0x60, (byte)0xA0, (byte)0xA4, (byte)0xFB, (byte)0x2E, (byte)0xC0, (byte)0x80, (byte)0xA6, (byte)0xE2, (byte)0x36, (byte)0x57, (byte)0xF6,
            (byte)0x3D, (byte)0x4F, (byte)0xBA, (byte)0xF2, (byte)0xA0, (byte)0x52, (byte)0x07, (byte)0x96, (byte)0xD9, (byte)0x19, (byte)0x0B, (byte)0x87,
            (byte)0x80, (byte)0xFF, (byte)0x5F, (byte)0xC0, (byte)0xF4, (byte)0x05, (byte)0xA6, (byte)0xAE, (byte)0x3A, (byte)0xC5, (byte)0x4D, (byte)0xB9,
            (byte)0x53, (byte)0x0C, (byte)0x6E, (byte)0x7F, (byte)0x7D, (byte)0x59, (byte)0xEF, (byte)0x02, (byte)0x6C, (byte)0x9D, (byte)0xDD, (byte)0x57,
            (byte)0xB7, (byte)0xB6, (byte)0x19, (byte)0xB8, (byte)0x1E, (byte)0xC4, (byte)0xB9, (byte)0xC4, (byte)0xF8, (byte)0xC7, (byte)0x8F, (byte)0x00,
            (byte)0x64, (byte)0x07, (byte)0x0C, (byte)0x37, (byte)0xD5, (byte)0x04, (byte)0x8C, (byte)0x72, (byte)0x00, (byte)0xE1, (byte)0x36, (byte)0xA0,
            (byte)0x1B, (byte)0xC0, (byte)0x85, (byte)0x25, (byte)0x00, (byte)0x1A, (byte)0x89, (byte)0x35, (byte)0x96, (byte)0xFE, (byte)0x75, (byte)0x08,
            (byte)0x8B, (byte)0x3E, (byte)0x4D, (byte)0x00, (byte)0x33, (byte)0xE1, (byte)0x0C, (byte)0xE9, (byte)0x75, (byte)0xC6, (byte)0x0B, (byte)0x37,
            (byte)0xCD, (byte)0xE5, (byte)0xCE, (byte)0x25, (byte)0xE0, (byte)0x10, (byte)0xEC, (byte)0x2B, (byte)0xCC, (byte)0x39, (byte)0x80, (byte)0x5B,
            (byte)0x29, (byte)0x0B, (byte)0xD5, (byte)0x1A, (byte)0xBA, (byte)0x73, (byte)0xB1, (byte)0x71, (byte)0x41, (byte)0x34, (byte)0x96, (byte)0xFF,
            (byte)0x3C, (byte)0x04, (byte)0xB5, (byte)0x03, (byte)0x2E, (byte)0x09, (byte)0x36, (byte)0x25, (byte)0xFA, (byte)0xF3, (byte)0x96, (byte)0xD2,
            (byte)0xE8, (byte)0xCA, (byte)0x57, (byte)0x89, (byte)0x67, (byte)0x13, (byte)0xE0, (byte)0x30, (byte)0x92, (byte)0xD1, (byte)0x00, (byte)0xC0,
            (byte)0xC3, (byte)0x11, (byte)0x8E, (byte)0xD1, (byte)0x52, (byte)0xF5, (byte)0x95, (byte)0x8E, (byte)0xF4, (byte)0xD5, (byte)0x01, (byte)0xBC,
            (byte)0x1F, (byte)0x50, (byte)0x1F, (byte)0x7C, (byte)0xFB, (byte)0x10, (byte)0x80, (byte)0x1B, (byte)0x6D, (byte)0xDF, (byte)0xAE, (byte)0xF8,
            (byte)0xB6, (byte)0x46, (byte)0xD6, (byte)0x2A, (byte)0xAA, (byte)0x37, (byte)0x11, (byte)0x34, (byte)0x0E, (byte)0xE6, (byte)0xEC, (byte)0xDF,
            (byte)0x01, (byte)0xE0, (byte)0xE4, (byte)0x06, (byte)0x13, (byte)0x57, (byte)0xD6, (byte)0x81, (byte)0x78, (byte)0x16, (byte)0x11, (byte)0x06,
            (byte)0x3D, (byte)0xD9, (byte)0xF6, (byte)0x1A, (byte)0x31, (byte)0xE2, (byte)0x23, (byte)0x00, (byte)0xC4, (byte)0xF1, (byte)0x87, (byte)0xAD,
            (byte)0x09, (byte)0xD0, (byte)0x7F, (byte)0x05, (byte)0x58, (byte)0x97, (byte)0x0E, (byte)0x3B, (byte)0x20, (byte)0x82, (byte)0xAD, (byte)0x1D,
            (byte)0x60, (byte)0x99, (byte)0xE3, (byte)0x66, (byte)0xC6, (byte)0x32, (byte)0xED, (byte)0xF1, (byte)0x22, (byte)0x4E, (byte)0x00, (byte)0xD2,
            (byte)0x8C, (byte)0xE7, (byte)0x80, (byte)0xE7, (byte)0x78, (byte)0xFD, (byte)0xBA, (byte)0xFE, (byte)0x46, (byte)0xC0, (byte)0xFF, (byte)0x02,
            (byte)0xF0, (byte)0x5D, (byte)0x3F, (byte)0xE6, (byte)0xF6, (byte)0x99, (byte)0x60, (byte)0xF1, (byte)0x74, (byte)0x7E, (byte)0xF9, (byte)0x28,
            (byte)0x60, (byte)0x9D, (byte)0x01, (byte)0xFC, (byte)0xA2, (byte)0x6A, (byte)0x74, (byte)0x00, (byte)0xC2, (byte)0x7C, (byte)0xB6, (byte)0x9C,
            (byte)0x4A, (byte)0x6C, (byte)0x75, (byte)0x96, (byte)0x63, (byte)0xC1, (byte)0x5F, (byte)0x74, (byte)0xEF, (byte)0x02, (byte)0x58, (byte)0xF7,
            (byte)0x2F, (byte)0xC7, (byte)0x80, (byte)0x0C, (byte)0x5F, (byte)0x8A, (byte)0x84, (byte)0xEA, (byte)0xDA, (byte)0xB6, (byte)0xDE, (byte)0x84,
            (byte)0xCB, (byte)0x22, (byte)0x77, (byte)0x35, (byte)0x32, (byte)0xD6, (byte)0xF5, (byte)0x61, (byte)0x23, (byte)0x40, (byte)0x25, (byte)0xAF,
            (byte)0xFC, (byte)0x36, (byte)0x80, (byte)0x75, (byte)0x56, (byte)0xD4, (byte)0xE3, (byte)0xBE, (byte)0x48, (byte)0xD9, (byte)0xDD, (byte)0x34,
            (byte)0x00, (byte)0x52, (byte)0x89, (byte)0xB9, (byte)0xC3, (byte)0xF2, (byte)0x04, (byte)0x7E, (byte)0xA5, (byte)0xAF, (byte)0x10, (byte)0xA1,
            (byte)0xDC, (byte)0x56, (byte)0x7C, (byte)0x02, (byte)0xA0, (byte)0x92, (byte)0x8B, (byte)0x06, (byte)0xF7, (byte)0xFF, (byte)0xB2, (byte)0xD2,
            (byte)0x3A, (byte)0xAF, (byte)0x21, (byte)0xFD, (byte)0x88, (byte)0xAC, (byte)0xD5, (byte)0x95, (byte)0xF3, (byte)0x0A, (byte)0xB5, (byte)0x0D,
            (byte)0xF0, (byte)0xEB, (byte)0x7B, (byte)0x83, (byte)0x53, (byte)0xC0, (byte)0x1F, (byte)0xEF, (byte)0x0D, (byte)0xA2, (byte)0x4D, (byte)0x77,
            (byte)0x69, (byte)0xB8, (byte)0xB7, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4E, (byte)0x44, (byte)0xAE,
            (byte)0x42, (byte)0x60, (byte)0x82
    };
}
